{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf810
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww9900\viewh7800\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs22 \cf0 import sys\
import math\
\
class TraylorCipher:\
  \
  def encrypt(self, stringToEncrypt):\
    \
    return ""\
    \
  def decrypt(self, stringToDecrypt):\
    \
    return ""\
    \
  # Helper Functions\
  \
  # Convert a single character to an 8-letter Traylor "byte"\
  @staticmethod\
  def characterToTraylorByte(character):\
    \
    if(len(character) != 1):\
      \
      raise TraylorException("Invalid character to convert to Traylor Byte.")\
    \
    asciiValue = ord(character)\
    \
    binaryArray = TraylorCipher.numberToBinaryArray(asciiValue)\
    traylorByte = ''\
    \
    # Go through binary array, creating Traylor byte\
    for index in range(len(binaryArray)):\
      \
      if(binaryArray[index] == 0):\
        \
        traylorByte += 'r'\
        \
      else:\
        \
        traylorByte += 'R'\
        \
    return traylorByte\
    \
  # Convert a Traylor Byte to a single ASCII character\
  @staticmethod\
  def traylorByteToCharacter(traylorByte):\
  \
    if(len(traylorByte) != 8):\
      \
        raise TraylorException("Invalid Traylor Byte length to convert to character.")\
        \
    bitArray = []      \
  \
    # Convert Rs to 1s and rs to 0s\
    for index in range(len(traylorByte)):\
      \
      traylorBit = traylorByte[index]\
      \
      if(traylorBit != 'R' and traylorBit != 'r'):\
        \
        raise TraylorException("Invalid Traylor Byte content to convert to character.")\
      \
      # Derive the bit value\
      bitValue = 1 if (traylorByte == 'R') else 0\
      \
      # Add to the bitArray\
      bitArray.push(bitValue)\
      \
    # Convert to number via sub-method\
    value = TraylorCipher.binaryArrayToNumber(bitArray)\
    \
    # Convert to ASCII character and return\
    return chr(value)\
    \
  # Convert a number to a 8-element array of 1s and 0s\
  # Where array position corresponds to factor of 2\
  @staticmethod\
  def numberToBinaryArray(number):\
    \
    value = 0\
    \
    # First, convert and check for a number\
    try:\
    \
      value = int(number)\
      \
    except ValueError:\
    \
      raise TraylorException("Non-number passed to binary array conversion.")\
    \
    # 1 byte represents base-10 numbers 0-255.\
    # Next, check for a valid number range\
    if(number > 255 or number < 0):\
      \
      raise TraylorException("Invalid number passed to binary array conversion.")\
    \
    binaryArray = [0, 0, 0, 0, 0, 0, 0, 0]\
    \
    # Begin at 7, decrement to 0\
    for exponent in range(len(binaryArray) - 1, -1, -1):\
\
      powerOf2 = math.pow(2, exponent)\
\
      if(number >= powerOf2):\
        \
        number -= powerOf2\
        binaryArray[exponent] = 1\
\
    return binaryArray\
    \
  # Convert a 8-element array of 1s and 0s to a number 0-255\
  # In the array, array index corresponds to factor of 255\
  @staticmethod\
  def binaryArrayToNumber(binaryArray):\
    \
    if(len(binaryArray) != 8):\
      \
      raise TraylorException("Invalid binary array length.")\
      \
    runningSum = 0\
      \
    for exponent in range(len(binaryArray)):\
      \
      if(binaryArray[exponent] == 1):\
        \
        runningSum += math.pow(2, exponent)\
        continue\
      \
      if(binaryArray[exponent] != 0):\
        \
        raise TraylorException("Invalid binary array contents.")\
        \
    return int(runningSum)\
    \
class TraylorException(Exception):\
    \
  pass\
  \
TraylorCipher.characterToTraylorByte('a')}